Grundlagen OpenGL
=================
:author: Frank Hofmann
:backend: slidy
:max-width: 94%
:icons:

== Inhalt ==

* Ablauf der Schulung
* Arbeits- und Entwicklungsumgebung
* OpenGL im Überblick
* OpenGL-Denkwelt

== Ablauf der Schulung ==

=== Willkommen im Kurs === 

* Vorstellungsrunde

* Kursablauf
** Zeiten und Pausen
** Umgang miteinander
** Feedback und Fragen

* Vorkenntnisse, Ziele und Erwartungen

=== Systemumgebung und genutzte Software im Kurs ===

* VirtualBox mit Debian GNU/Linux (https://www.debian.org/)

* installiert sind darin: 
** Python 3 (https://www.python.org/)
** Bibliothek PyGame (https://www.pygame.org/wiki/about)
** Bibliothek OpenGL für Python (https://pyopengl.sourceforge.net/)
** Bibliothek Free OpenGL Utility Toolkit (FreeGlut) (https://freeglut.sourceforge.net/)
** Versionskontrollsystem Git (https://git-scm.com/)
** GVim (https://packages.debian.org/bullseye/vim-gtk3)

=== Schulungsunterlagen ===

* Sourcecode und Format: Asciidoc (https://asciidoc.org/)

* Github-Repository (https://github.com/hofmannedv/training-opengl)

* Programmcode
** Github-Repository (https://github.com/hofmannedv/training-python/tree/master/opengl)
** eigenes Projekt zum Ausprobieren
*** Zeit pro Tag: 1h
*** Vorstellung der Umsetzung am letzten Kurstag

== OpenGL im Überblick ==

=== Begriff ===

* OpenGL kürzt 'Open Graphics Library' ab

* bezeichnet die Spezifikation einer plattform- und
programmiersprachenübergreifenden API zur Entwicklung von 2D- und
3D-Computergrafikanwendungen (Vektorgrafik)

* Umfang: 
** Standard: etwa 250 Befehle, die die Darstellung komplexer 3D-Szenen in Echtzeit erlauben
** herstellerspezifische Erweiterungen möglich

* Alternativen und Konkurrenzentwicklungen (Auswahl):
** Web Graphics Library (WebGL) auf der Basis von JavaScript für den
Webbrowser (https://www.khronos.org/webgl/)
** DirectX (https://en.wikipedia.org/wiki/DirectX)
** Vulkan (https://www.vulkan.org/)
** Allegro (https://liballeg.org/)

=== Historie ===

* Ursprung und Basis: IRIS GL von SGI (1992)

* Koordinator zur Weiterentwicklung seit 2006: Khronos Group (https://www.khronos.org/)

* Versionsgeschichte: https://de.wikipedia.org/wiki/OpenGL#Versionsgeschichte

* Nachfolger:
** Vulkan (https://www.vulkan.org/)
** Vergleich zwischen OpenGL und Vulkan (https://www.educba.com/opengl-vs-vulkan/)
** OpenGL-basierte Projekte auf die Vulkan-API umbauen
(https://www.khronos.org/assets/uploads/developers/library/2016-vulkan-devday-uk/10-Porting-to-Vulkan.pdf)

* Aufbau:
** Version 1.x: Fixed Pipeline
** ab Version 2.x Programmable Pipeline
** Bild zum Vergleich: https://sites.google.com/site/face2manoj/opengl/pipeline

=== Einsatzfeld ===

* Gestaltung von 3D-Szenen in Echtzeit

* Rendering von Objekten auf der Basis von geometrischen Formen
(Punkte, Linien, Rechtecke, Dreiecke, Polygone)

* Verwendung von Farben (RGBA) und Texturen (Abbilden von Grafiken auf
geometrischen Objekten)

* Objekttransformationen -- Drehen und Skalieren von einzelnen Objekten
und gruppierten Objekten

* Kamerabewegungen

=== Prominente Beispiele ===

* Liste von Spielen, die OpenGL benutzen (https://www.pcgamingwiki.com/wiki/List_of_OpenGL_games)

=== Referenzmaterial und Links ===

* Creative Coding, https://project-awesome.org/terkelg/awesome-creative-coding

* OpenGL, https://www.opengl.org/

* OpenGL/GLUT Python/C++ , https://codeloop.org/python-opengl/

* Tastenbezeichnungen in PyGame, https://www.pygame.org/docs/ref/key.html

* OpenGL Wikibooks (C/C++), https://en.wikibooks.org/wiki/OpenGL_Programming

* OpenGL Tutorial (C/C++), http://www.zeuscmd.com/tutorials/opengl/index.php

* OpenGL Tutorial (C/C++), http://nehe.gamedev.net/tutorial/lessons_01__05/22004/

* OpenGL/pyopengl Development, https://pyopengl.sourceforge.net/documentation/index.html

* OpenGL with PyOpenGL introduction and creation of Rotating Cube, https://pythonprogramming.net/opengl-rotating-cube-example-pyopengl-tutorial/

* Python & OpenGL for Scientific Visualization, https://github.com/rougier/python-opengl

== OpenGL-Denkwelt ==

=== Ausgabe und Darstellung ===

* Ausgabefenster

* Auflösung

* Darstellungsmodus
** orthographisch
** perspektivisch

=== Interaktion ===

* Fenster schließen mit der Maus

* Tastaturintegration
** Fenster schließen mit Escape-Taste
** Einbinden der Bewegungstasten

=== OpenGL-Kommandos ===

* Initialisierung der Ausgabeumgebung

=== Grundobjekte ===

* Punkte
* Linie
* Quadrat
* Polygon
* Dreiecke

=== Farben ===

* Farbmodelle
* Farben definieren und benutzen

=== Achsen und 3D-Welt ===

* Achsen darstellen

=== Kamera bewegen (Clipping) ===

* rein- und rauszoomen

=== Objekttransformationen ===

* drehen nach links und rechts

* skalieren 

* rotieren (drehen um eine Achse)
